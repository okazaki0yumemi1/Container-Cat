// <auto-generated />
using System;
using Container_Cat.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Container_Cat.Migrations
{
    [DbContext(typeof(ContainerCatContext))]
    [Migration("20230628174005_DTOAddition")]
    partial class DTOAddition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("Container_Cat.Containers.Models.BaseContainer", b =>
                {
                    b.Property<string>("objId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SystemDataObjId")
                        .HasColumnType("TEXT");

                    b.HasKey("objId");

                    b.HasIndex("SystemDataObjId");

                    b.ToTable("BaseContainer");
                });

            modelBuilder.Entity("Container_Cat.Containers.Models.Mount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseContainerobjId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("RW")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseContainerobjId");

                    b.ToTable("Mounts");
                });

            modelBuilder.Entity("Container_Cat.Containers.Models.Port", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseContainerobjId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IP")
                        .HasColumnType("TEXT");

                    b.Property<int>("PrivatePort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublicPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseContainerobjId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Container_Cat.Utilities.Models.HostAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Availability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Port")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HostAddresses");
                });

            modelBuilder.Entity("Container_Cat.Utilities.Models.SystemDataObj", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("InstalledContainerEngine")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("NetworkAddressId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NetworkAddressId");

                    b.ToTable("SystemDataObj");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SystemDataObj");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Container_Cat.Utilities.Models.HostSystem<Container_Cat.Containers.Models.BaseContainer>", b =>
                {
                    b.HasBaseType("Container_Cat.Utilities.Models.SystemDataObj");

                    b.HasDiscriminator().HasValue("HostSystem<BaseContainer>");
                });

            modelBuilder.Entity("Container_Cat.Containers.Models.BaseContainer", b =>
                {
                    b.HasOne("Container_Cat.Utilities.Models.SystemDataObj", null)
                        .WithMany("Containers")
                        .HasForeignKey("SystemDataObjId");
                });

            modelBuilder.Entity("Container_Cat.Containers.Models.Mount", b =>
                {
                    b.HasOne("Container_Cat.Containers.Models.BaseContainer", null)
                        .WithMany("Mounts")
                        .HasForeignKey("BaseContainerobjId");
                });

            modelBuilder.Entity("Container_Cat.Containers.Models.Port", b =>
                {
                    b.HasOne("Container_Cat.Containers.Models.BaseContainer", null)
                        .WithMany("Ports")
                        .HasForeignKey("BaseContainerobjId");
                });

            modelBuilder.Entity("Container_Cat.Utilities.Models.SystemDataObj", b =>
                {
                    b.HasOne("Container_Cat.Utilities.Models.HostAddress", "NetworkAddress")
                        .WithMany()
                        .HasForeignKey("NetworkAddressId");

                    b.Navigation("NetworkAddress");
                });

            modelBuilder.Entity("Container_Cat.Containers.Models.BaseContainer", b =>
                {
                    b.Navigation("Mounts");

                    b.Navigation("Ports");
                });

            modelBuilder.Entity("Container_Cat.Utilities.Models.SystemDataObj", b =>
                {
                    b.Navigation("Containers");
                });
#pragma warning restore 612, 618
        }
    }
}
